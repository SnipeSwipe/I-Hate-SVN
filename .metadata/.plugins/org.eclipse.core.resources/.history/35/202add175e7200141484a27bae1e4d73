package characters;

import interfaces.PlayingInterface;

import java.awt.Color;

import java.awt.Graphics2D;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Rectangle2D;
import java.util.Random;

import javax.swing.*;

import table.PlayPanel;

public abstract class Player implements PlayingInterface {

	private Rectangle2D.Double player;
	private int sizex, sizey, speed;
	public int dy;
	private Color color;
	public PlayPanel panel;
	int starty, startx;
	public int currentx, currenty;
	int min, max;
	int bound;
	int minKickSpeed, maxKickSpeed;
	Random rand;

	KeyEvent e;

	public Player(PlayPanel panel, int starty, int startx, int dy, int bound,
			Color color) {
		this.panel = panel;
		sizex = 25;
		sizey = 25;
		speed = 50; // This sleeps, so increase to decrease speed
		this.startx = startx;
		this.starty = starty;
		this.currentx = startx;
		this.currenty = starty;
		this.dy = dy;
		this.bound = bound; // defines the upper and lower bound for movement
		this.max = starty + bound - 25;
		this.min = starty - bound;
		this.color = color;

		player = new Rectangle2D.Double(startx, starty, sizex, sizey);

		panel.setFocusable(true);
		panel.requestFocusInWindow();
	}

	public Rectangle2D.Double getPlayerRect() {
		return this.player;
	}

	public void move() {
		if (this.currenty <= this.min || this.currenty >= this.max) {
			this.dy = this.dy * (-1);
		}
		// System.out.println("Not Working");
		this.currenty += this.dy;
	}

	public void move(int bally) {
		if (this.currenty <= this.min || this.currenty >= this.max) {
			if (this.currenty < bally) {
				if (this.dy < 0) {
					this.dy = this.dy * (-1);
					this.currenty += this.dy;
					// System.out.println("Working");
				}
			} else if (this.currenty > bally) {
				if (this.dy > 0) {
					this.dy = this.dy * (-1);
					this.currenty += this.dy;
				}
			}
		}
	}

	public void moveUp() {
		this.dy = -10;
		if (this.currenty > this.min) {
			this.currenty += this.dy;
		} else {
			this.dy = 0;
		}
	}

	public void moveDown() {
		this.dy = 10;
		if (this.currenty < this.max) {
			this.currenty += this.dy;
		} else {
			this.dy = 0;
		}
	}

	public void draw(Graphics2D g2d) {
		if (player != null) {
			g2d.setColor(color);
			player.setFrame(currentx, currenty, sizex, sizey);
			g2d.fillRect(currentx, currenty, sizex, sizey);
		}
	}

	public int getError(boolean isHuman) {

		int error = 0;

		switch (panel.diffLevel) {

		case 1: {
			if (isHuman)
				error = 4 + (int) (Math.random() * 2);
			else
				error = 4 + (int) (Math.random() * 4);
			break;
		}
		case 2: {
			if (isHuman)
				error = 3 + (int) (Math.random() * 3);
			else
				error = 3 + (int) (Math.random() * 3);
			break;
		}
		case 3: {
			if (isHuman)
				error = 1 + (int) (Math.random() * 4);
			else
				error = 1 + (int) (Math.random() * 2);
			break;

		}
		}

		if (rand.nextInt(1) == 0) {
			return error;
		} else {
			return error * (-1);
		}

	}

}

package characters;

import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Rectangle2D;
import java.util.Random;

import table.Ball;
import table.Formation;
import table.PlayPanel;
//import table.PlayPanel.Attacker;
//import table.PlayPanel.Defender;
//import table.PlayPanel.Goalkeeper;
//import table.PlayPanel.Midfielder;

public class Team implements Runnable {
	TeamMode teamMode;
	public Formation formation;
	public Defender[] defenders;
	public Midfielder[] midfielders;
	public Attacker[] attackers;
	public Goalkeeper goalkeeper;
	public int bally;
	public PlayPanel panel;
	private Rectangle2D.Double rod;
	private Rectangle2D.Double rodGK1;
	private Rectangle2D.Double rodGK2;

	Random ran;
	int rand;
	
	Color color, rodColor;
	public boolean isMoving;

	int timeCord = 0;

	public void setBally(int b) {
		bally = b;
	}

	public void run() {
		while (isMoving) {
			try {
				Thread.sleep(20);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}

			AI(1);
			
			
			// Repaint as usual
			this.panel.repaint();
		}
	}

	public void AI(int dif) {
		// Whole motive of AI is to try to make Goalkeeper reach the ball,
		// any other intersection that happens is accidental

		rand=ran.nextInt(5)-2;
		
		// timeCord to make AI movement fast/slow
		timeCord++;
		if ((Ball.newy)+rand > goalkeeper.currenty) {
			// if ball's below gk, we move the whole team down
			if (timeCord % dif == 0) {
				// Loop makes team movement a little slow, otherwise AI was
				// too fast
				this.moveDown();
			}
		} else if (Ball.newy < goalkeeper.currenty) {
			// If ball's above the gk, we move the whole team up
			if (timeCord % dif == 0) {
				this.moveUp();
			}
		}
	}

	public void rodDraw(Graphics2D g2d) {
		int placerod = 194;
		rodGK1 = new Rectangle2D.Double(1227, 0, 2, 670);
		rodGK2 = new Rectangle2D.Double(66, 0, 2, 670);
		rodColor = new Color(0, 100, 0);

		if (rodGK1 != null || rodGK2 != null) {
			g2d.setColor(rodColor);
			g2d.fill(rodGK1);
			g2d.fill(rodGK2);
		}
		for (int k = 0; k < 8; k++) {
			rod = new Rectangle2D.Double(placerod, 0, 2, 670);
			placerod += 182;
			if (rod != null) {
				g2d.setColor(rodColor);
				g2d.fill(rod);
			}
		}

	}

	public Team(Formation formation, PlayPanel panel, TeamMode teamMode) {
		this.panel = panel;
		this.formation = formation;
		this.defenders = new Defender[this.formation.noOfDefenders];
		this.midfielders = new Midfielder[this.formation.noOfMidfielders];
		this.attackers = new Attacker[this.formation.noOfAttackers];

		int panelHeight = 670; // this is the width of the field.
		int gkY, defY, midY, attackY;
		int gkBound, defBound, midBound, attackBound; // movement bounds for
														// players

		// bounds and starting positions set according to formation
		defY = defBound = convertNumberToCoordinateGap(panelHeight,
				this.formation.noOfDefenders);
		midY = midBound = convertNumberToCoordinateGap(panelHeight,
				this.formation.noOfMidfielders);
		attackY = attackBound = convertNumberToCoordinateGap(panelHeight,
				this.formation.noOfAttackers);
		gkY = panelHeight / 2;

		gkBound = 130; // bound set to cover just the goal area

		int gkX, defX, midX, attackX;
		gkX = defX = midX = attackX = 0;

		if (teamMode == TeamMode.HUMAN) {
			gkX = 59;
			defX = 185;
			midX = 549;
			attackX = 913;
			this.color = new Color(255, 165, 0);
		} else if (teamMode == TeamMode.COMPUTER) {
			gkX = 1221;
			defX = 1095;
			midX = 731;
			attackX = 367;
			this.color = new Color(72, 61, 139);
			this.isMoving = true;
		}

		this.goalkeeper = new Goalkeeper(this.panel, gkY, gkX, 5, gkBound,
				this.color);

		for (int i = 0; i < this.formation.noOfDefenders; i++) {
			this.defenders[i] = new Defender(this.panel, defY, defX, 5,
					defBound, this.color);
			defY += convertNumberToCoordinateGap(panelHeight,
					this.formation.noOfDefenders);
		}

		for (int i = 0; i < this.formation.noOfMidfielders; i++) {
			this.midfielders[i] = new Midfielder(this.panel, midY, midX, 5,
					midBound, this.color);
			midY += convertNumberToCoordinateGap(panelHeight,
					this.formation.noOfMidfielders);
		}

		for (int i = 0; i < this.formation.noOfAttackers; i++) {
			this.attackers[i] = new Attacker(this.panel, attackY, attackX, 5,
					attackBound, this.color);
			attackY += convertNumberToCoordinateGap(panelHeight,
					this.formation.noOfAttackers);
		}

	}

	public void move() {
		this.goalkeeper.move();

		for (int i = 0; i < this.formation.noOfDefenders; i++) {
			this.defenders[i].move();
		}

		for (int i = 0; i < this.formation.noOfMidfielders; i++) {
			this.midfielders[i].move();
		}

		for (int i = 0; i < this.formation.noOfAttackers; i++) {
			this.attackers[i].move();
		}
	}

	public void move(int bally) {

		System.out.println(bally);
		this.goalkeeper.move(bally);

		for (int i = 0; i < this.formation.noOfDefenders; i++) {
			this.defenders[i].move(bally);
		}

		for (int i = 0; i < this.formation.noOfMidfielders; i++) {
			this.midfielders[i].move(bally);
		}

		for (int i = 0; i < this.formation.noOfAttackers; i++) {
			this.attackers[i].move(bally);
		}
	}

	public void moveUp() {
		this.goalkeeper.moveUp();

		for (int i = 0; i < this.formation.noOfDefenders; i++) {
			this.defenders[i].moveUp();
		}

		for (int i = 0; i < this.formation.noOfMidfielders; i++) {
			this.midfielders[i].moveUp();
		}

		for (int i = 0; i < this.formation.noOfAttackers; i++) {
			this.attackers[i].moveUp();
		}
	}

	public void moveDown() {
		this.goalkeeper.moveDown();

		for (int i = 0; i < this.formation.noOfDefenders; i++) {
			this.defenders[i].moveDown();
		}

		for (int i = 0; i < this.formation.noOfMidfielders; i++) {
			this.midfielders[i].moveDown();
		}

		for (int i = 0; i < this.formation.noOfAttackers; i++) {
			this.attackers[i].moveDown();
		}
	}

	public void draw(Graphics2D g2d) {
		// Team team=new Team(formation, panel, teamMode);

		this.rodDraw(g2d);
		this.goalkeeper.draw(g2d);

		for (int i = 0; i < this.formation.noOfDefenders; i++) {
			this.defenders[i].draw(g2d);
		}

		for (int i = 0; i < this.formation.noOfMidfielders; i++) {
			this.midfielders[i].draw(g2d);
		}

		for (int i = 0; i < this.formation.noOfAttackers; i++) {
			this.attackers[i].draw(g2d);
		}

	}

	static int convertNumberToCoordinateGap(int height, int number) {

		return height / (number + 1);

	}
}

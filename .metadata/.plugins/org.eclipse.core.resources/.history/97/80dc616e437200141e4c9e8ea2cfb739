package characters;

import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Rectangle2D;
import java.util.Random;

import javax.swing.JPanel;

import table.PlayPanel;

public class Attacker extends Player {

	public Attacker(PlayPanel panel, int starty, int startx, int dy, int bound,
			Color color) {
		super(panel, starty, startx, 6, bound, color);
		minKickSpeed = 20;
		maxKickSpeed = 30;
	}
<<<<<<< Updated upstream
	
	
	/*public int[] kicke(int dx, int dy, int dir) { // x - present x axis speed
											   // y - present y axis speed
											   // dir - x axis direction(+ or -)
		
=======

	public int[] kick(int dx, int dy, int dir) { // x - present x axis speed
													// y - present y axis speed
													// dir - x axis direction(+
													// or -)

>>>>>>> Stashed changes
		int[] coords = new int[2];

		// dir = dir/(Math.abs(dir)); //Get only unit vector direction in x axis
		if (dir > 0) // i.e. if dx and dir have same sign (While defending)
			dx = Math.abs(dx) * (-1);
		else { // Else dx and dir have different signs(While attacking)
			int newSpeed = minKickSpeed
					+ (int) (Math.random() * (maxKickSpeed - minKickSpeed));
			dx = dir * (newSpeed) * (-1);
		}

		// if going downwards, reduce ball angle(I dunno how to
		// put it, just change ball angle)
		if (this.dy > 0) {
			dy = dy + 1;
		} else {
			dy = dy - 1;
		}
		coords[0] = dx;
		coords[1] = dy;
		return coords;
	}*/
	
	public int[] kick(int dx, int dy, int dir){
		
		int[] coords = new int[2];
		int toX;
		int toY = 320;
		
		if(startx > 640)
			toX = 1280;
		else
			toX = 0;
		
		dir = dir/(Math.abs(dir)); //Get only unit vector direction in x axis
		if(dx*dir > 0){  //i.e. if dx and dir have same sign (While defending)
			dx = dir*Math.abs(dx);
			coords[0] = dx;
			coords[1] = dy;
		}
		
		else{		//Else dx and dir have different signs(While attacking)
			int newSpeed = minKickSpeed + (int)(Math.random()*(maxKickSpeed-minKickSpeed));
			
			double xcoor = toX - this.currentx;
			double ycoor = toY - this.currenty;
			
			ycoor = (ycoor*newSpeed)/xcoor;
			xcoor = newSpeed;
			
			coords[0] = dir*(int)xcoor;
			coords[1] = dir*(int)ycoor;
			
			
		}
				
		return coords;
			
	}

}
